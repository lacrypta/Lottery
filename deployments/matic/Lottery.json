{
  "address": "0xFeC8E7020544eD0c0f32D2cd4e9B043f3C722d33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameAlreadyInUse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NotYetCreated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        }
      ],
      "name": "NumberOfWinnersMustBeAtMostNumberOfPlayers",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NumberOfWinnersMustBePositive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PlayersMustBeNonEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "players",
          "type": "string[]"
        }
      ],
      "name": "build",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "seed",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfWinners",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "players",
              "type": "string[]"
            }
          ],
          "internalType": "struct ILottery.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "seed",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfWinners",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "players",
              "type": "string[]"
            }
          ],
          "internalType": "struct ILottery.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "players",
          "type": "string[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "existing",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "seed",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfWinners",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "players",
              "type": "string[]"
            }
          ],
          "internalType": "struct ILottery.Config",
          "name": "lottery",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "seed",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfWinners",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "players",
              "type": "string[]"
            }
          ],
          "internalType": "struct ILottery.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "prizeWinners",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "numberOfWinners",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "players",
          "type": "string[]"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "prizeWinners",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "prizeWinners",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34030ed2ce81ddf50a553efb5372d80f8a05a9f61467b700ca6b92ccb51537e0",
  "receipt": {
    "to": null,
    "from": "0x4BADCf0DCeaAD060f86D9b34c9E118c8319945AE",
    "contractAddress": "0xFeC8E7020544eD0c0f32D2cd4e9B043f3C722d33",
    "transactionIndex": 82,
    "gasUsed": "959345",
    "logsBloom": "0x
    "blockHash": "0x7278ef6494354f775bf9ec5d1e1052db2dbe46f14c0bbbb68c114f778a98fa80",
    "transactionHash": "0x34030ed2ce81ddf50a553efb5372d80f8a05a9f61467b700ca6b92ccb51537e0",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 35360451,
        "transactionHash": "0x34030ed2ce81ddf50a553efb5372d80f8a05a9f61467b700ca6b92ccb51537e0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004badcf0dceaad060f86d9b34c9e118c8319945ae",
          "0x00000000000000000000000060e274b09f701107a4b3226fcc1376ebda3cdd92"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ee043e19c56f99000000000000000000000000000000000000000000000000b6cf940f3bac6ef00000000000000000000000000000000000000000000004e94d1a0bc3d69c5343000000000000000000000000000000000000000000000000b5e18fd121e6ff570000000000000000000000000000000000000000000004e94e081001f061c2dc",
        "logIndex": 428,
        "blockHash": "0x7278ef6494354f775bf9ec5d1e1052db2dbe46f14c0bbbb68c114f778a98fa80"
      }
    ],
    "blockNumber": 35360451,
    "cumulativeGasUsed": "17786565",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "773bc4e34d78978f912eaeb1507ea697",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameAlreadyInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NotYetCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"}],\"name\":\"NumberOfWinnersMustBeAtMostNumberOfPlayers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberOfWinnersMustBePositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlayersMustBeNonEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"name\":\"build\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"internalType\":\"struct ILottery.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"internalType\":\"struct ILottery.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"existing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"internalType\":\"struct ILottery.Config\",\"name\":\"lottery\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"internalType\":\"struct ILottery.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"prizeWinners\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"players\",\"type\":\"string[]\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"prizeWinners\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"prizeWinners\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NameAlreadyInUse(string)\":[{\"params\":{\"name\":\"The offending name\"}}],\"NotYetCreated(string)\":[{\"params\":{\"name\":\"The offending name\"}}],\"NumberOfWinnersMustBeAtMostNumberOfPlayers(uint256,uint256)\":[{\"params\":{\"numberOfPlayers\":\"The offending number of players\",\"numberOfWinners\":\"The offending number of winners\"}}]},\"kind\":\"dev\",\"methods\":{\"build(bytes32,uint256,string[])\":{\"custom:revert\":\"PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers\",\"params\":{\"numberOfWinners\":\"The number of winners to use\",\"players\":\"A list of players to use\",\"seed\":\"The RNG seed to use\"},\"returns\":{\"config\":\" The constructed configuration\"}},\"create(string,(bytes32,uint256,string[]))\":{\"custom:revert\":\"NameAlreadyInUsePlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers\",\"params\":{\"config\":\"Lottery configuration to use\",\"name\":\"Lottery name to use\"},\"returns\":{\"success\":\" True if creation was successful\"}},\"create(string,bytes32,uint256,string[])\":{\"custom:revert\":\"NameAlreadyInUsePlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers\",\"params\":{\"name\":\"Lottery name to use\",\"numberOfWinners\":\"The number of winners to use\",\"players\":\"A list of players to use\",\"seed\":\"The RNG seed to use\"},\"returns\":{\"success\":\" True if creation was successful\"}},\"exists(string)\":{\"params\":{\"name\":\"Lottery name to check\"},\"returns\":{\"existing\":\" True if the given lottery name exists, false otherwise\"}},\"get(string)\":{\"custom:revert\":\"NotYetCreated\",\"params\":{\"name\":\"Lottery name to retrieve\"},\"returns\":{\"lottery\":\" The lottery configuration proper\"}},\"simulate((bytes32,uint256,string[]))\":{\"custom:revert\":\"PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers\",\"params\":{\"config\":\"Lottery configuration to use\"},\"returns\":{\"prizeWinners\":\" List of winners\"}},\"simulate(bytes32,uint256,string[])\":{\"custom:revert\":\"PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers\",\"params\":{\"numberOfWinners\":\"The number of winners to use\",\"players\":\"A list of players to use\",\"seed\":\"The RNG seed to use\"},\"returns\":{\"prizeWinners\":\" List of winners\"}},\"winners(string)\":{\"custom:revert\":\"NotYetCreated\",\"params\":{\"name\":\"Lottery name to retrieve winners for\"},\"returns\":{\"prizeWinners\":\" List of winners\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"NameAlreadyInUse(string)\":[{\"notice\":\"Raised upon encountering an already-existing lottery name\"}],\"NotYetCreated(string)\":[{\"notice\":\"Raised upon encountering a non-existing lottery name\"}],\"NumberOfWinnersMustBeAtMostNumberOfPlayers(uint256,uint256)\":[{\"notice\":\"Raised upon encountering a number of winners greater than the corresponding population\"}],\"NumberOfWinnersMustBePositive()\":[{\"notice\":\"Raised upon encountering a 0-size selection (ie. the number of winners)\"}],\"PlayersMustBeNonEmpty()\":[{\"notice\":\"Raised upon encountering an empty players list\"}]},\"kind\":\"user\",\"methods\":{\"build(bytes32,uint256,string[])\":{\"notice\":\"Build a lottery configuration from the given parameters\"},\"create(string,(bytes32,uint256,string[]))\":{\"notice\":\"Create a new lottery with the given configuration\"},\"create(string,bytes32,uint256,string[])\":{\"notice\":\"Create a new lottery with the given configuration parts\"},\"exists(string)\":{\"notice\":\"Determine whether the given lottery name exists\"},\"get(string)\":{\"notice\":\"Retrieve an existing lottery by name\"},\"simulate((bytes32,uint256,string[]))\":{\"notice\":\"Simulate the execution of the given lottery configuration\"},\"simulate(bytes32,uint256,string[])\":{\"notice\":\"Simulate the execution of the given lottery configuration parts\"},\"winners(string)\":{\"notice\":\"Retrieve the list of winners\"}},\"notice\":\"Blockchain-based Lottery Implementation This Lottery implementation uses iterated Keccak256 as the underlying RNG.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/ILottery.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * Blockchain-based Lottery\\n *\\n * This interface allows you to interact with a blockchain-based lottery able to deal several prizes to a given population.\\n * All the inputs needed to reproduce the result are persisted in the blockchain, so as to be auditable and reproducible.\\n *\\n *\\n * The Lottery works like so:\\n *   - a new Lottery must be created, in order to do so, you need a name for it, the seed to use, the participant population\\n *     as a list of strings, and the number of prizes that will be dealt\\n *   - once the lottery is created, exists(name) will return true, and get(name) will return a structure representing the seed to\\n *     use, the population, and the number of prizes\\n *   - finally, with a created lottery, calling winners(name) will return the prize winners in no particular order.\\n *   - alternatively, the simulate(config) method can be called to obtain the winners without persisting anything on the\\n *     blockchain.\\n *\\n * Let's follow along a simple example.\\n * We want to create a Lottery that will deal 5 prizes amongst 100 participants, using a zero seed, we'll call it \\\"Doing the\\n * dishes for 100 dudes\\\".\\n *\\n * We first need to call (we'll use \\\">>>\\\" to denote calls, and \\\"<<<\\\" responses):\\n *\\n *   >>> create(\\\"Doing the dishes for 100 dudes\\\", [\\\"0x00...0\\\", 5, [\\\"one\\\", \\\"two\\\", ..., \\\"one hundred\\\"]])\\n *   <<< bool: success true\\n *\\n * Now we can check whether it was indeed created by doing:\\n *\\n *   >>> exists(\\\"Doing the dishes for 100 dudes\\\")\\n *   <<< bool: existing true\\n *\\n * and retrieve the Lottery's parameters by:\\n *\\n *   >>> get(\\\"Doing the dishes for 100 dudes\\\")\\n *   <<< tuple(bytes32,uint256,string[]): lottery 0x00...0,5,[\\\"one\\\",\\\"two\\\",...,\\\"one hundred\\\"]\\n *\\n * (see how this is the same data the create() call returns).\\n * Finally, we can retrieve the unlucky winners by calling:\\n *\\n *   >>> winners(\\\"Doing the dishes for 100 dudes\\\")\\n *   <<< string[]: winners \\\"nineteen\\\",\\\"twenty-three\\\",\\\"sixty-six\\\",\\\"ninety-two\\\",\\\"ninety-nine\\\"\\n *\\n * this means that participants 19, 23, 66, 92, and 99 won the coveted responsibility of doing the dishes.\\n *\\n *\\n * Notice that once the Lottery is created, the winners are all implicitly determined automatically, and persisted in the blockchain\\n * for all to see and audit.\\n */\\ninterface ILottery {\\n\\n    /**\\n     * Raised upon encountering a non-existing lottery name\\n     *\\n     * @param name  The offending name\\n     */\\n    error NotYetCreated(string name);\\n\\n    /**\\n     * Raised upon encountering an already-existing lottery name\\n     *\\n     * @param name  The offending name\\n     */\\n    error NameAlreadyInUse(string name);\\n\\n    /**\\n     * Raised upon encountering an empty players list\\n     *\\n     */\\n    error PlayersMustBeNonEmpty();\\n\\n    /**\\n     * Raised upon encountering a 0-size selection (ie. the number of winners)\\n     *\\n     */\\n    error NumberOfWinnersMustBePositive();\\n\\n    /**\\n     * Raised upon encountering a number of winners greater than the corresponding population\\n     *\\n     * @param numberOfPlayers  The offending number of players\\n     * @param numberOfWinners  The offending number of winners\\n     */\\n    error NumberOfWinnersMustBeAtMostNumberOfPlayers(uint256 numberOfPlayers, uint256 numberOfWinners);\\n\\n    /**\\n     * Structure representing a lottery configuration\\n     *\\n     * @custom:member seed  The RNG seed to use for this lottery\\n     * @custom:member numberOfWinners  The number of winners to use for this lottery\\n     * @custom:member players  A list of players for this lottery (this list CAN contain duplicates to simulate non-uniform odds)\\n     */\\n    struct Config {\\n        bytes32 seed;\\n        uint256 numberOfWinners;\\n        string[] players;\\n    }\\n\\n    /**\\n     * Build a lottery configuration from the given parameters\\n     *\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return config  The constructed configuration\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function build(bytes32 seed, uint256 numberOfWinners, string[] memory players) external pure returns (Config memory config);\\n\\n    /**\\n     * Determine whether the given lottery name exists\\n     *\\n     * @param name  Lottery name to check\\n     * @return existing  True if the given lottery name exists, false otherwise\\n     */\\n    function exists(string memory name) external view returns (bool existing);\\n\\n    /**\\n     * Retrieve an existing lottery by name\\n     *\\n     * @param name  Lottery name to retrieve\\n     * @return lottery  The lottery configuration proper\\n     * @custom:revert  NotYetCreated\\n     */\\n    function get(string memory name) external view returns (Config memory lottery);\\n\\n    /**\\n     * Create a new lottery with the given configuration\\n     *\\n     * @param name  Lottery name to use\\n     * @param config  Lottery configuration to use\\n     * @return success  True if creation was successful\\n     * @custom:revert  NameAlreadyInUse\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function create(string memory name, Config memory config) external returns (bool success);\\n\\n    /**\\n     * Create a new lottery with the given configuration parts\\n     *\\n     * @param name  Lottery name to use\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return success  True if creation was successful\\n     * @custom:revert  NameAlreadyInUse\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function create(string memory name, bytes32 seed, uint256 numberOfWinners, string[] memory players) external returns (bool success);\\n\\n    /**\\n     * Retrieve the list of winners\\n     *\\n     * @param name  Lottery name to retrieve winners for\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  NotYetCreated\\n     */\\n    function winners(string memory name) external view returns (string[] memory prizeWinners);\\n\\n    /**\\n     * Simulate the execution of the given lottery configuration\\n     *\\n     * @param config  Lottery configuration to use\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function simulate(Config memory config) external pure returns (string[] memory prizeWinners);\\n\\n    /**\\n     * Simulate the execution of the given lottery configuration parts\\n     *\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function simulate(bytes32 seed, uint256 numberOfWinners, string[] memory players) external pure returns (string[] memory prizeWinners);\\n}\\n\",\"keccak256\":\"0xdd27d67812b155c27ce216d1c5632d2f1489e49808516b040e1573e960eed6fb\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {ILottery} from \\\"./ILottery.sol\\\";\\n\\n/**\\n * Blockchain-based Lottery Implementation\\n *\\n * This Lottery implementation uses iterated Keccak256 as the underlying RNG.\\n *\\n */\\ncontract Lottery is ILottery {\\n\\n    /**\\n     * Mapping from hashed lottery name to lottery configuration\\n     *\\n     */\\n    mapping(bytes32 => Config) internal _lotteries;\\n\\n    /**\\n     * Build a lottery configuration from the given parameters\\n     *\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return config  The constructed configuration\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function build(bytes32 seed, uint256 numberOfWinners, string[] memory players) external pure override returns (Config memory config) {\\n        config = _build(seed, numberOfWinners, players);\\n    }\\n\\n    /**\\n     * Determine whether the given lottery name exists\\n     *\\n     * @param name  Lottery name to check\\n     * @return existing  True if the given lottery name exists, false otherwise\\n     */\\n    function exists(string memory name) external view override returns (bool existing) {\\n        existing = (0 != _lotteries[_nameHash(name)].players.length);\\n    }\\n\\n    /**\\n     * Retrieve an existing lottery by name\\n     *\\n     * @param name  Lottery name to retrieve\\n     * @return lottery  The lottery configuration proper\\n     * @custom:revert  NotYetCreated\\n     */\\n    function get(string memory name) external view override returns (Config memory lottery) {\\n        lottery = _get(name);\\n    }\\n\\n    /**\\n     * Create a new lottery with the given configuration\\n     *\\n     * @param name  Lottery name to use\\n     * @param config  Lottery configuration to use\\n     * @return success  True if creation was successful\\n     * @custom:revert  NameAlreadyInUse\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function create(string memory name, Config memory config) external override returns (bool success) {\\n        success = _create(name, _validate(config));\\n    }\\n\\n    /**\\n     * Create a new lottery with the given configuration parts\\n     *\\n     * @param name  Lottery name to use\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return success  True if creation was successful\\n     * @custom:revert  NameAlreadyInUse\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function create(string memory name, bytes32 seed, uint256 numberOfWinners, string[] memory players) external override returns (bool success) {\\n        success = _create(name, _build(seed, numberOfWinners, players));\\n    }\\n\\n    /**\\n     * Retrieve the list of winners\\n     *\\n     * @param name  Lottery name to retrieve winners for\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  NotYetCreated\\n     */\\n    function winners(string memory name) external view override returns (string[] memory prizeWinners) {\\n        prizeWinners = _winners(_get(name));\\n    }\\n\\n    /**\\n     * Simulate the execution of the given lottery configuration\\n     *\\n     * @param config  Lottery configuration to use\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function simulate(Config memory config) external pure override returns (string[] memory prizeWinners) {\\n        prizeWinners = _winners(_validate(config));\\n    }\\n\\n    /**\\n     * Simulate the execution of the given lottery configuration parts\\n     *\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return prizeWinners  List of winners\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function simulate(bytes32 seed, uint256 numberOfWinners, string[] memory players) external pure override returns (string[] memory prizeWinners) {\\n        prizeWinners = _winners(_build(seed, numberOfWinners, players));\\n    }\\n\\n    /**\\n     * Structure representing the internal state of the underlying RNG\\n     *\\n     * @custom:member state  The internal state (to be returned iteratively)\\n     * @custom:member index  The current bit position being returned\\n     * @custom:member round  The number of hash iterations done so far, incremented each time the state needs to be hashed\\n     */\\n    struct _Rng {\\n        bytes32 state;\\n        uint8 index;\\n        uint256 round;\\n    }\\n\\n    /**\\n     * Build a lottery configuration from the given parameters (internal)\\n     *\\n     * @param seed  The RNG seed to use\\n     * @param numberOfWinners  The number of winners to use\\n     * @param players  A list of players to use\\n     * @return config  The constructed configuration\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function _build(bytes32 seed, uint256 numberOfWinners, string[] memory players) internal pure returns (Config memory config) {\\n        config = _validate(Config(seed, numberOfWinners, players));\\n    }\\n\\n    /**\\n     * Validate the given lottery configuration\\n     *\\n     * @param config  Lottery configuration to validate\\n     * @return ok  The given configuration, if valid\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function _validate(Config memory config) internal pure returns (Config memory ok) {\\n        if (0 == config.players.length) {\\n            revert PlayersMustBeNonEmpty();\\n        }\\n        if (0 == config.numberOfWinners) {\\n            revert NumberOfWinnersMustBePositive();\\n        }\\n        if (config.players.length < config.numberOfWinners) {\\n            revert NumberOfWinnersMustBeAtMostNumberOfPlayers(config.players.length, config.numberOfWinners);\\n        }\\n        ok = config;\\n    }\\n\\n    /**\\n     * Compute the hashed lottery name\\n     *\\n     * @param name  The lottery name to hash\\n     * @return nameHash  The hashed lottery name\\n     */\\n    function _nameHash(string memory name) internal pure returns (bytes32 nameHash) {\\n        nameHash = keccak256(bytes(name));\\n    }\\n\\n    /**\\n     * Retrieve an existing lottery by name (internal)\\n     *\\n     * @param name  Lottery name to retrieve\\n     * @return lottery  The lottery configuration proper\\n     * @custom:revert  NotYetCreated\\n     */\\n    function _get(string memory name) internal view returns (Config memory lottery) {\\n        bytes32 nameHash = _nameHash(name);\\n        if (0 == _lotteries[nameHash].players.length) {\\n            revert NotYetCreated(name);\\n        }\\n        lottery = _lotteries[nameHash];\\n    }\\n\\n    /**\\n     * Create a new lottery with the given configuration (internal)\\n     *\\n     * @param name  Lottery name to use\\n     * @param config  Lottery configuration to use\\n     * @return success  True if creation was successful\\n     * @custom:revert  NameAlreadyInUse\\n     * @custom:revert  PlayersMustBeNonEmpty\\n     * @custom:revert  NumberOfWinnersMustBePositive\\n     * @custom:revert  NumberOfWinnersMustBeAtMostNumberOfPlayers\\n     */\\n    function _create(string memory name, Config memory config) internal returns (bool success) {\\n        bytes32 nameHash = _nameHash(name);\\n        if (0 != _lotteries[nameHash].players.length) {\\n            revert NameAlreadyInUse(name);\\n        }\\n        _lotteries[nameHash] = config;\\n        return true;\\n    }\\n\\n    /**\\n     * Retrieve the list of winners (internal)\\n     *\\n     * Winner retrieval entails creating a permutation of the first `config.players.length` numbers, and taking `config.numberOfWinners` many.\\n     * This ensures _uniform_ selection.\\n     *\\n     * In order to create the truncated permutation proper, the Fisher--Yates algorithm is run until `config.numberOfWinners` items have been\\n     * generated.\\n     * In order to feed the Fisher--yates algorithm, the FDR algorithm is used.\\n     *\\n     *\\n     * @param config  Lottery configuration to use\\n     * @return prizeWinners  List of winners\\n     */\\n    function _winners(Config memory config) internal pure returns (string[] memory prizeWinners) {\\n        uint256[] memory winnerIds = _fisherYatesUpTo(_Rng(config.seed, 0, 0), config.players.length, config.numberOfWinners);\\n        prizeWinners = new string[](config.numberOfWinners);\\n        for (uint256 i = 0; i < config.numberOfWinners; i++) {\\n            prizeWinners[i] = config.players[winnerIds[i]];\\n        }\\n    }\\n\\n    /**\\n     * Inside-out Fisher--Yates algorithm that only continues until the given number of members\\n     *\\n     * @custom:ref  \\\"Fisher--Yates inside-out algorithm\\\" https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_%22inside-out%22_algorithm\\n     * @param rng  The RNG to use\\n     * @param size  The number of elements in total\\n     * @param until  The number of elements to generate\\n     * @return elements  The generated permutation\\n     */\\n    function _fisherYatesUpTo(_Rng memory rng, uint256 size, uint256 until) internal pure returns (uint256[] memory elements) {\\n        unchecked {\\n            uint256[] memory values = new uint256[](size);\\n            for (uint256 i = 0; i < size; i++) {\\n                values[i] = i;\\n            }\\n            elements = new uint256[](until);\\n            for (uint256 i = 0; i < until; i++) {\\n                uint256 j = i + _fdr(rng, size - i);\\n                (elements[i], values[j]) = (values[j], values[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Return a uniformly random integer between 0 (inclusive) and `max` (exclusive), using the given RNG\\n     *\\n     * This algorithm implements the FDR algorithm of Lumbroso.\\n     *\\n     * @custom:ref \\\"Optimal Discrete Uniform Generation from Coin Flips, and Applications --- J\\\\u00e9r\\\\u00e9mie Lumbroso (2013)\\\" https://arxiv.org/pdf/1304.1916\\n     * @param rng  The RNG to use\\n     * @param max  The maximum (exclusive) to generate\\n     * @return value  The generated number\\n     */\\n    function _fdr(_Rng memory rng, uint256 max) internal pure returns (uint256 value) {\\n        unchecked {\\n            uint256 limit = 1;\\n            while (true) {\\n                (limit, value) = (limit << 1, (value << 1) + _getBit(rng));\\n                if (max <= limit) {\\n                    if (value < max) {\\n                        break;\\n                    } else {\\n                        (limit, value) = (limit - max, value - max);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Retrieve a bit out of the given RNG\\n     *\\n     * @param rng  The RNG to use\\n     * @return bit  The extracted bit as a number\\n     */\\n    function _getBit(_Rng memory rng) internal pure returns (uint256 bit) {\\n        unchecked {\\n            if (0 == rng.index) {\\n                rng.state = keccak256(abi.encodePacked(rng.state, rng.round++));\\n            }\\n            bit = (0 != (uint8(rng.state[rng.index >> 3]) & (uint8(1) << (rng.index % 8)))) ? 1 : 0;\\n            rng.index++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x413f5f142f06a4ee9cfc0be742471b42d4a0ab438337e4f889e9019ed6f9b24f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061106d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063672b2e3c1161005b578063672b2e3c14610108578063685f6f051461011b578063693ec85e1461012e578063afef9ee01461014157600080fd5b806321b25d771461008d578063261a323e146100b557806328e0a79d146100c857806339bfe4e3146100e8575b600080fd5b6100a061009b366004610b9c565b610154565b60405190151581526020015b60405180910390f35b6100a06100c3366004610c00565b61016f565b6100db6100d6366004610c00565b61019f565b6040516100ac9190610c7b565b6100fb6100f6366004610cfb565b6101b8565b6040516100ac9190610d4b565b6100db610116366004610ddb565b6101e7565b6100db610129366004610cfb565b6101f5565b6100fb61013c366004610c00565b610205565b6100a061014f366004610e10565b61022a565b60006101688361016384610244565b610343565b9392505050565b600080600061018384805160209091012090565b8152602081019190915260400160002060020154151592915050565b60606101b26101ad836103dc565b610561565b92915050565b604080516060808201835260008083526020830152918101919091526101df84848461066e565b949350505050565b60606101b26101ad83610244565b60606101df6101ad85858561066e565b604080516060808201835260008083526020830152918101919091526101b2826103dc565b600061023b8561016386868661066e565b95945050505050565b6040805160608082018352600080835260208301529181019190915281604001515160000361029f576040517fa7eb64ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81602001516000036102dd576040517f0154273d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160200151826040015151101561033f5781604001515182602001516040517f225722f2000000000000000000000000000000000000000000000000000000008152600401610336929190918252602082015260400190565b60405180910390fd5b5090565b815160208084019190912060008181529182905260408220600201541561039857836040517f5226f2070000000000000000000000000000000000000000000000000000000081526004016103369190610e87565b60008181526020818152604091829020855181558186015160018201559185015180518693926103cf926002850192910190610910565b5060019695505050505050565b60408051606080820183526000808352602083015291810191909152815160208301206000906000818152602081905260408120600201549192500361045057826040517f45d67df80000000000000000000000000000000000000000000000000000000081526004016103369190610e87565b600080828152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156105525783829060005260206000200180546104c590610e9a565b80601f01602080910402602001604051908101604052809291908181526020018280546104f190610e9a565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b5050505050815260200190600101906104a6565b50505091525090949350505050565b6060600061059c604051806060016040528085600001518152602001600060ff168152602001600081525084604001515185602001516106ad565b9050826020015167ffffffffffffffff8111156105bb576105bb6109cd565b6040519080825280602002602001820160405280156105ee57816020015b60608152602001906001900390816105d95790505b50915060005b836020015181101561066757836040015182828151811061061757610617610ed4565b60200260200101518151811061062f5761062f610ed4565b602002602001015183828151811061064957610649610ed4565b6020026020010181905250808061065f90610eea565b9150506105f4565b5050919050565b604080516060808201835260008083526020830152918101919091526101df604051806060016040528086815260200185815260200184815250610244565b606060008367ffffffffffffffff8111156106ca576106ca6109cd565b6040519080825280602002602001820160405280156106f3578160200160208202803683370190505b50905060005b84811015610727578082828151811061071457610714610ed4565b60209081029190910101526001016106f9565b508267ffffffffffffffff811115610741576107416109cd565b60405190808252806020026020018201604052801561076a578160200160208202803683370190505b50915060005b838110156108015760006107868783880361080a565b8201905082818151811061079c5761079c610ed4565b60200260200101518383815181106107b6576107b6610ed4565b60200260200101518584815181106107d0576107d0610ed4565b602002602001018584815181106107e9576107e9610ed4565b60209081029190910101919091525250600101610770565b50509392505050565b600060015b600181901b61081d8561084c565b60019390931b909201919050808311610840578282106108455790829003908290035b61080f565b5092915050565b6000816020015160ff166000036108995781516040808401805160018101909152815160208101939093529082015260600160408051601f19818403018152919052805160209091012082525b6008826020015160ff16816108b0576108b0610f12565b0660ff16600160ff16901b82600001516003846020015160ff16901c60ff16602081106108df576108df610ed4565b1a1660ff166000036108f25760006108f5565b60015b6020909201805160010160ff90811690915291909116919050565b828054828255906000526020600020908101928215610956579160200282015b8281111561095657825182906109469082610f77565b5091602001919060010190610930565b5061033f9291505b8082111561033f576000610972828261097b565b5060010161095e565b50805461098790610e9a565b6000825580601f10610997575050565b601f0160209004906000526020600020908101906109b591906109b8565b50565b5b8082111561033f57600081556001016109b9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0c57610a0c6109cd565b604052919050565b600082601f830112610a2557600080fd5b813567ffffffffffffffff811115610a3f57610a3f6109cd565b610a526020601f19601f840116016109e3565b818152846020838601011115610a6757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a9557600080fd5b8135602067ffffffffffffffff80831115610ab257610ab26109cd565b8260051b610ac18382016109e3565b9384528581018301938381019088861115610adb57600080fd5b84880192505b85831015610b1757823584811115610af95760008081fd5b610b078a87838c0101610a14565b8352509184019190840190610ae1565b98975050505050505050565b600060608284031215610b3557600080fd5b6040516060810167ffffffffffffffff8282108183111715610b5957610b596109cd565b8160405282935084358352602085013560208401526040850135915080821115610b8257600080fd5b50610b8f85828601610a84565b6040830152505092915050565b60008060408385031215610baf57600080fd5b823567ffffffffffffffff80821115610bc757600080fd5b610bd386838701610a14565b93506020850135915080821115610be957600080fd5b50610bf685828601610b23565b9150509250929050565b600060208284031215610c1257600080fd5b813567ffffffffffffffff811115610c2957600080fd5b6101df84828501610a14565b6000815180845260005b81811015610c5b57602081850181015186830182015201610c3f565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610cdc858351610c35565b94509285019290850190600101610ca2565b5092979650505050505050565b600080600060608486031215610d1057600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610d3557600080fd5b610d4186828701610a84565b9150509250925092565b6000602080835260808301845182850152818501516040850152604085015160608086015281815180845260a08701915060a08160051b8801019350848301925060005b81811015610cee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60888603018352610dc9858551610c35565b94509285019291850191600101610d8f565b600060208284031215610ded57600080fd5b813567ffffffffffffffff811115610e0457600080fd5b6101df84828501610b23565b60008060008060808587031215610e2657600080fd5b843567ffffffffffffffff80821115610e3e57600080fd5b610e4a88838901610a14565b955060208701359450604087013593506060870135915080821115610e6e57600080fd5b50610e7b87828801610a84565b91505092959194509250565b6020815260006101686020830184610c35565b600181811c90821680610eae57607f821691505b602082108103610ece57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198203610f0b57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052601260045260246000fd5b601f821115610f7257600081815260208120601f850160051c81016020861015610f4f5750805b601f850160051c820191505b81811015610f6e57828155600101610f5b565b5050505b505050565b815167ffffffffffffffff811115610f9157610f916109cd565b610fa581610f9f8454610e9a565b84610f28565b602080601f831160018114610fda5760008415610fc25750858301515b600019600386901b1c1916600185901b178555610f6e565b600085815260208120601f198616915b8281101561100957888601518255948401946001909101908401610fea565b50858210156110275787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122096319aa53558b46712c91a46326c5cf4af8e4120fe3fcdeea7eecf5070f7b01264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063672b2e3c1161005b578063672b2e3c14610108578063685f6f051461011b578063693ec85e1461012e578063afef9ee01461014157600080fd5b806321b25d771461008d578063261a323e146100b557806328e0a79d146100c857806339bfe4e3146100e8575b600080fd5b6100a061009b366004610b9c565b610154565b60405190151581526020015b60405180910390f35b6100a06100c3366004610c00565b61016f565b6100db6100d6366004610c00565b61019f565b6040516100ac9190610c7b565b6100fb6100f6366004610cfb565b6101b8565b6040516100ac9190610d4b565b6100db610116366004610ddb565b6101e7565b6100db610129366004610cfb565b6101f5565b6100fb61013c366004610c00565b610205565b6100a061014f366004610e10565b61022a565b60006101688361016384610244565b610343565b9392505050565b600080600061018384805160209091012090565b8152602081019190915260400160002060020154151592915050565b60606101b26101ad836103dc565b610561565b92915050565b604080516060808201835260008083526020830152918101919091526101df84848461066e565b949350505050565b60606101b26101ad83610244565b60606101df6101ad85858561066e565b604080516060808201835260008083526020830152918101919091526101b2826103dc565b600061023b8561016386868661066e565b95945050505050565b6040805160608082018352600080835260208301529181019190915281604001515160000361029f576040517fa7eb64ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81602001516000036102dd576040517f0154273d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160200151826040015151101561033f5781604001515182602001516040517f225722f2000000000000000000000000000000000000000000000000000000008152600401610336929190918252602082015260400190565b60405180910390fd5b5090565b815160208084019190912060008181529182905260408220600201541561039857836040517f5226f2070000000000000000000000000000000000000000000000000000000081526004016103369190610e87565b60008181526020818152604091829020855181558186015160018201559185015180518693926103cf926002850192910190610910565b5060019695505050505050565b60408051606080820183526000808352602083015291810191909152815160208301206000906000818152602081905260408120600201549192500361045057826040517f45d67df80000000000000000000000000000000000000000000000000000000081526004016103369190610e87565b600080828152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156105525783829060005260206000200180546104c590610e9a565b80601f01602080910402602001604051908101604052809291908181526020018280546104f190610e9a565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b5050505050815260200190600101906104a6565b50505091525090949350505050565b6060600061059c604051806060016040528085600001518152602001600060ff168152602001600081525084604001515185602001516106ad565b9050826020015167ffffffffffffffff8111156105bb576105bb6109cd565b6040519080825280602002602001820160405280156105ee57816020015b60608152602001906001900390816105d95790505b50915060005b836020015181101561066757836040015182828151811061061757610617610ed4565b60200260200101518151811061062f5761062f610ed4565b602002602001015183828151811061064957610649610ed4565b6020026020010181905250808061065f90610eea565b9150506105f4565b5050919050565b604080516060808201835260008083526020830152918101919091526101df604051806060016040528086815260200185815260200184815250610244565b606060008367ffffffffffffffff8111156106ca576106ca6109cd565b6040519080825280602002602001820160405280156106f3578160200160208202803683370190505b50905060005b84811015610727578082828151811061071457610714610ed4565b60209081029190910101526001016106f9565b508267ffffffffffffffff811115610741576107416109cd565b60405190808252806020026020018201604052801561076a578160200160208202803683370190505b50915060005b838110156108015760006107868783880361080a565b8201905082818151811061079c5761079c610ed4565b60200260200101518383815181106107b6576107b6610ed4565b60200260200101518584815181106107d0576107d0610ed4565b602002602001018584815181106107e9576107e9610ed4565b60209081029190910101919091525250600101610770565b50509392505050565b600060015b600181901b61081d8561084c565b60019390931b909201919050808311610840578282106108455790829003908290035b61080f565b5092915050565b6000816020015160ff166000036108995781516040808401805160018101909152815160208101939093529082015260600160408051601f19818403018152919052805160209091012082525b6008826020015160ff16816108b0576108b0610f12565b0660ff16600160ff16901b82600001516003846020015160ff16901c60ff16602081106108df576108df610ed4565b1a1660ff166000036108f25760006108f5565b60015b6020909201805160010160ff90811690915291909116919050565b828054828255906000526020600020908101928215610956579160200282015b8281111561095657825182906109469082610f77565b5091602001919060010190610930565b5061033f9291505b8082111561033f576000610972828261097b565b5060010161095e565b50805461098790610e9a565b6000825580601f10610997575050565b601f0160209004906000526020600020908101906109b591906109b8565b50565b5b8082111561033f57600081556001016109b9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0c57610a0c6109cd565b604052919050565b600082601f830112610a2557600080fd5b813567ffffffffffffffff811115610a3f57610a3f6109cd565b610a526020601f19601f840116016109e3565b818152846020838601011115610a6757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610a9557600080fd5b8135602067ffffffffffffffff80831115610ab257610ab26109cd565b8260051b610ac18382016109e3565b9384528581018301938381019088861115610adb57600080fd5b84880192505b85831015610b1757823584811115610af95760008081fd5b610b078a87838c0101610a14565b8352509184019190840190610ae1565b98975050505050505050565b600060608284031215610b3557600080fd5b6040516060810167ffffffffffffffff8282108183111715610b5957610b596109cd565b8160405282935084358352602085013560208401526040850135915080821115610b8257600080fd5b50610b8f85828601610a84565b6040830152505092915050565b60008060408385031215610baf57600080fd5b823567ffffffffffffffff80821115610bc757600080fd5b610bd386838701610a14565b93506020850135915080821115610be957600080fd5b50610bf685828601610b23565b9150509250929050565b600060208284031215610c1257600080fd5b813567ffffffffffffffff811115610c2957600080fd5b6101df84828501610a14565b6000815180845260005b81811015610c5b57602081850181015186830182015201610c3f565b506000602082860101526020601f19601f83011685010191505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610cdc858351610c35565b94509285019290850190600101610ca2565b5092979650505050505050565b600080600060608486031215610d1057600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610d3557600080fd5b610d4186828701610a84565b9150509250925092565b6000602080835260808301845182850152818501516040850152604085015160608086015281815180845260a08701915060a08160051b8801019350848301925060005b81811015610cee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60888603018352610dc9858551610c35565b94509285019291850191600101610d8f565b600060208284031215610ded57600080fd5b813567ffffffffffffffff811115610e0457600080fd5b6101df84828501610b23565b60008060008060808587031215610e2657600080fd5b843567ffffffffffffffff80821115610e3e57600080fd5b610e4a88838901610a14565b955060208701359450604087013593506060870135915080821115610e6e57600080fd5b50610e7b87828801610a84565b91505092959194509250565b6020815260006101686020830184610c35565b600181811c90821680610eae57607f821691505b602082108103610ece57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198203610f0b57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052601260045260246000fd5b601f821115610f7257600081815260208120601f850160051c81016020861015610f4f5750805b601f850160051c820191505b81811015610f6e57828155600101610f5b565b5050505b505050565b815167ffffffffffffffff811115610f9157610f916109cd565b610fa581610f9f8454610e9a565b84610f28565b602080601f831160018114610fda5760008415610fc25750858301515b600019600386901b1c1916600185901b178555610f6e565b600085815260208120601f198616915b8281101561100957888601518255948401946001909101908401610fea565b50858210156110275787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122096319aa53558b46712c91a46326c5cf4af8e4120fe3fcdeea7eecf5070f7b01264736f6c63430008110033",
  "devdoc": {
    "errors": {
      "NameAlreadyInUse(string)": [
        {
          "params": {
            "name": "The offending name"
          }
        }
      ],
      "NotYetCreated(string)": [
        {
          "params": {
            "name": "The offending name"
          }
        }
      ],
      "NumberOfWinnersMustBeAtMostNumberOfPlayers(uint256,uint256)": [
        {
          "params": {
            "numberOfPlayers": "The offending number of players",
            "numberOfWinners": "The offending number of winners"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "build(bytes32,uint256,string[])": {
        "custom:revert": "PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers",
        "params": {
          "numberOfWinners": "The number of winners to use",
          "players": "A list of players to use",
          "seed": "The RNG seed to use"
        },
        "returns": {
          "config": " The constructed configuration"
        }
      },
      "create(string,(bytes32,uint256,string[]))": {
        "custom:revert": "NameAlreadyInUsePlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers",
        "params": {
          "config": "Lottery configuration to use",
          "name": "Lottery name to use"
        },
        "returns": {
          "success": " True if creation was successful"
        }
      },
      "create(string,bytes32,uint256,string[])": {
        "custom:revert": "NameAlreadyInUsePlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers",
        "params": {
          "name": "Lottery name to use",
          "numberOfWinners": "The number of winners to use",
          "players": "A list of players to use",
          "seed": "The RNG seed to use"
        },
        "returns": {
          "success": " True if creation was successful"
        }
      },
      "exists(string)": {
        "params": {
          "name": "Lottery name to check"
        },
        "returns": {
          "existing": " True if the given lottery name exists, false otherwise"
        }
      },
      "get(string)": {
        "custom:revert": "NotYetCreated",
        "params": {
          "name": "Lottery name to retrieve"
        },
        "returns": {
          "lottery": " The lottery configuration proper"
        }
      },
      "simulate((bytes32,uint256,string[]))": {
        "custom:revert": "PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers",
        "params": {
          "config": "Lottery configuration to use"
        },
        "returns": {
          "prizeWinners": " List of winners"
        }
      },
      "simulate(bytes32,uint256,string[])": {
        "custom:revert": "PlayersMustBeNonEmptyNumberOfWinnersMustBePositiveNumberOfWinnersMustBeAtMostNumberOfPlayers",
        "params": {
          "numberOfWinners": "The number of winners to use",
          "players": "A list of players to use",
          "seed": "The RNG seed to use"
        },
        "returns": {
          "prizeWinners": " List of winners"
        }
      },
      "winners(string)": {
        "custom:revert": "NotYetCreated",
        "params": {
          "name": "Lottery name to retrieve winners for"
        },
        "returns": {
          "prizeWinners": " List of winners"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NameAlreadyInUse(string)": [
        {
          "notice": "Raised upon encountering an already-existing lottery name"
        }
      ],
      "NotYetCreated(string)": [
        {
          "notice": "Raised upon encountering a non-existing lottery name"
        }
      ],
      "NumberOfWinnersMustBeAtMostNumberOfPlayers(uint256,uint256)": [
        {
          "notice": "Raised upon encountering a number of winners greater than the corresponding population"
        }
      ],
      "NumberOfWinnersMustBePositive()": [
        {
          "notice": "Raised upon encountering a 0-size selection (ie. the number of winners)"
        }
      ],
      "PlayersMustBeNonEmpty()": [
        {
          "notice": "Raised upon encountering an empty players list"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "build(bytes32,uint256,string[])": {
        "notice": "Build a lottery configuration from the given parameters"
      },
      "create(string,(bytes32,uint256,string[]))": {
        "notice": "Create a new lottery with the given configuration"
      },
      "create(string,bytes32,uint256,string[])": {
        "notice": "Create a new lottery with the given configuration parts"
      },
      "exists(string)": {
        "notice": "Determine whether the given lottery name exists"
      },
      "get(string)": {
        "notice": "Retrieve an existing lottery by name"
      },
      "simulate((bytes32,uint256,string[]))": {
        "notice": "Simulate the execution of the given lottery configuration"
      },
      "simulate(bytes32,uint256,string[])": {
        "notice": "Simulate the execution of the given lottery configuration parts"
      },
      "winners(string)": {
        "notice": "Retrieve the list of winners"
      }
    },
    "notice": "Blockchain-based Lottery Implementation This Lottery implementation uses iterated Keccak256 as the underlying RNG.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 137,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_lotteries",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Config)33_storage)"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Config)33_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILottery.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)33_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Config)33_storage": {
        "encoding": "inplace",
        "label": "struct ILottery.Config",
        "members": [
          {
            "astId": 27,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 29,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "numberOfWinners",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 32,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "players",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}